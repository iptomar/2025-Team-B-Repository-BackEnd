// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250404153931_AdicaoRoles")]
    partial class AdicaoRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Bloco", b =>
                {
                    b.Property<int>("Id_bloco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_bloco"));

                    b.Property<string>("Hora_fim")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Hora_inicio")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Sala")
                        .HasColumnType("int");

                    b.HasKey("Id_bloco");

                    b.HasIndex("Sala");

                    b.ToTable("Bloco");
                });

            modelBuilder.Entity("WebApplication1.Models.Bloco_Horario", b =>
                {
                    b.Property<int>("Id_bloco")
                        .HasColumnType("int");

                    b.Property<int>("Id_horario")
                        .HasColumnType("int");

                    b.HasKey("Id_bloco", "Id_horario");

                    b.HasIndex("Id_horario");

                    b.ToTable("Bloco_Horario");
                });

            modelBuilder.Entity("WebApplication1.Models.Cadeira", b =>
                {
                    b.Property<int>("Id_cadeira")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_cadeira"));

                    b.Property<int>("ECTS")
                        .HasColumnType("int");

                    b.Property<string>("Nome_cadeira")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id_cadeira");

                    b.ToTable("Cadeira");
                });

            modelBuilder.Entity("WebApplication1.Models.Curso", b =>
                {
                    b.Property<int>("Id_curso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_curso"));

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<int>("Grau")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id_curso");

                    b.HasIndex("Grau");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("WebApplication1.Models.Curso_Cadeira", b =>
                {
                    b.Property<int>("Id_curso")
                        .HasColumnType("int");

                    b.Property<int>("Id_cadeira")
                        .HasColumnType("int");

                    b.HasKey("Id_curso", "Id_cadeira");

                    b.HasIndex("Id_cadeira");

                    b.ToTable("Curso_Cadeira");
                });

            modelBuilder.Entity("WebApplication1.Models.Curso_Instituicao", b =>
                {
                    b.Property<int>("Id_curso")
                        .HasColumnType("int");

                    b.Property<int>("Id_instituicao")
                        .HasColumnType("int");

                    b.HasKey("Id_curso", "Id_instituicao");

                    b.HasIndex("Id_instituicao");

                    b.ToTable("Curso_Instituicao");
                });

            modelBuilder.Entity("WebApplication1.Models.Grau", b =>
                {
                    b.Property<int>("Id_grau")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_grau"));

                    b.Property<string>("Nome_grau")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id_grau");

                    b.ToTable("Grau");
                });

            modelBuilder.Entity("WebApplication1.Models.Horario", b =>
                {
                    b.Property<int>("Id_horario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_horario"));

                    b.Property<int>("Curso")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Data_fim")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Data_inicio")
                        .HasColumnType("date");

                    b.HasKey("Id_horario");

                    b.HasIndex("Curso");

                    b.ToTable("Horario");
                });

            modelBuilder.Entity("WebApplication1.Models.Instituicao", b =>
                {
                    b.Property<int>("Id_instituicao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_instituicao"));

                    b.Property<string>("Nome_instituicao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_instituicao");

                    b.ToTable("Instituicao");
                });

            modelBuilder.Entity("WebApplication1.Models.Localidade", b =>
                {
                    b.Property<int>("Id_localidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_localidade"));

                    b.Property<string>("Nome_localidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id_localidade");

                    b.ToTable("Localidade");
                });

            modelBuilder.Entity("WebApplication1.Models.Professor", b =>
                {
                    b.Property<int>("Id_professor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_professor"));

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id_professor");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("WebApplication1.Models.Professor_Cadeira", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("Id_professor")
                        .HasColumnType("int");

                    b.Property<int>("Id_cadeira")
                        .HasColumnType("int");

                    b.HasKey("ID", "Id_professor", "Id_cadeira");

                    b.HasIndex("Id_cadeira");

                    b.HasIndex("Id_professor");

                    b.ToTable("Professor_Cadeira");
                });

            modelBuilder.Entity("WebApplication1.Models.Registo", b =>
                {
                    b.Property<int>("Id_registo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_registo"));

                    b.Property<int>("Horario")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Utilizador")
                        .HasColumnType("int");

                    b.HasKey("Id_registo");

                    b.HasIndex("Horario");

                    b.HasIndex("Utilizador");

                    b.ToTable("Registo");
                });

            modelBuilder.Entity("WebApplication1.Models.Sala", b =>
                {
                    b.Property<int>("Id_sala")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_sala"));

                    b.Property<int>("Localidade")
                        .HasColumnType("int");

                    b.Property<string>("Nome_sala")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id_sala");

                    b.HasIndex("Localidade");

                    b.ToTable("Sala");
                });

            modelBuilder.Entity("WebApplication1.Models.Tipologia", b =>
                {
                    b.Property<int>("Id_tipologia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_tipologia"));

                    b.Property<string>("Nome_tipologia")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id_tipologia");

                    b.ToTable("Tipologia");
                });

            modelBuilder.Entity("WebApplication1.Models.Tipologia_Cadeira", b =>
                {
                    b.Property<int>("Id_tipologia")
                        .HasColumnType("int");

                    b.Property<int>("Id_cadeira")
                        .HasColumnType("int");

                    b.HasKey("Id_tipologia", "Id_cadeira");

                    b.HasIndex("Id_cadeira");

                    b.ToTable("Tipologia_Cadeira");
                });

            modelBuilder.Entity("WebApplication1.Models.Turma", b =>
                {
                    b.Property<string>("Letra_turma")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("Ano_academico")
                        .HasColumnType("int");

                    b.Property<int>("Semestre")
                        .HasColumnType("int");

                    b.Property<int>("Curso")
                        .HasColumnType("int");

                    b.HasKey("Letra_turma", "Ano_academico", "Semestre");

                    b.HasIndex("Curso");

                    b.ToTable("Turma");
                });

            modelBuilder.Entity("WebApplication1.Models.Utilizador", b =>
                {
                    b.Property<int>("Id_utilizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_utilizador"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.HasKey("Id_utilizador");

                    b.ToTable("Utilizador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Bloco", b =>
                {
                    b.HasOne("WebApplication1.Models.Sala", "Id_sala")
                        .WithMany("FKBloco")
                        .HasForeignKey("Sala")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_sala");
                });

            modelBuilder.Entity("WebApplication1.Models.Bloco_Horario", b =>
                {
                    b.HasOne("WebApplication1.Models.Bloco", "Bloco")
                        .WithMany("FKBlocoHorario")
                        .HasForeignKey("Id_bloco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Horario", "Horario")
                        .WithMany("FKBlocoHorario")
                        .HasForeignKey("Id_horario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bloco");

                    b.Navigation("Horario");
                });

            modelBuilder.Entity("WebApplication1.Models.Curso", b =>
                {
                    b.HasOne("WebApplication1.Models.Grau", "Id_grau")
                        .WithMany("Curso")
                        .HasForeignKey("Grau")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_grau");
                });

            modelBuilder.Entity("WebApplication1.Models.Curso_Cadeira", b =>
                {
                    b.HasOne("WebApplication1.Models.Cadeira", "Cadeira")
                        .WithMany("FKCurso_Cadeira")
                        .HasForeignKey("Id_cadeira")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Curso", "Curso")
                        .WithMany("FKCurso_Cadeira")
                        .HasForeignKey("Id_curso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cadeira");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("WebApplication1.Models.Curso_Instituicao", b =>
                {
                    b.HasOne("WebApplication1.Models.Curso", "Curso")
                        .WithMany("FKCurso_Instituicao")
                        .HasForeignKey("Id_curso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Instituicao", "Instituicao")
                        .WithMany("FKCurso_Instituicao")
                        .HasForeignKey("Id_instituicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Instituicao");
                });

            modelBuilder.Entity("WebApplication1.Models.Horario", b =>
                {
                    b.HasOne("WebApplication1.Models.Curso", "Id_curso")
                        .WithMany("FKHorario")
                        .HasForeignKey("Curso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_curso");
                });

            modelBuilder.Entity("WebApplication1.Models.Professor_Cadeira", b =>
                {
                    b.HasOne("WebApplication1.Models.Cadeira", "Cadeira")
                        .WithMany("FKProfessor_Cadeira")
                        .HasForeignKey("Id_cadeira")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Professor", "Professor")
                        .WithMany("FKProfessor_Cadeira")
                        .HasForeignKey("Id_professor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cadeira");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("WebApplication1.Models.Registo", b =>
                {
                    b.HasOne("WebApplication1.Models.Horario", "Id_horario")
                        .WithMany("FKRegisto")
                        .HasForeignKey("Horario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Utilizador", "Id_utilizador")
                        .WithMany("FKRegisto")
                        .HasForeignKey("Utilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_horario");

                    b.Navigation("Id_utilizador");
                });

            modelBuilder.Entity("WebApplication1.Models.Sala", b =>
                {
                    b.HasOne("WebApplication1.Models.Localidade", "Id_localidade")
                        .WithMany("FKSala")
                        .HasForeignKey("Localidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_localidade");
                });

            modelBuilder.Entity("WebApplication1.Models.Tipologia_Cadeira", b =>
                {
                    b.HasOne("WebApplication1.Models.Cadeira", "Cadeira")
                        .WithMany("FKTipologia_Cadeira")
                        .HasForeignKey("Id_cadeira")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Tipologia", "Tipologia")
                        .WithMany("FKTipologia_Cadeira")
                        .HasForeignKey("Id_tipologia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cadeira");

                    b.Navigation("Tipologia");
                });

            modelBuilder.Entity("WebApplication1.Models.Turma", b =>
                {
                    b.HasOne("WebApplication1.Models.Curso", "Id_curso")
                        .WithMany("FKTurma")
                        .HasForeignKey("Curso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Id_curso");
                });

            modelBuilder.Entity("WebApplication1.Models.Bloco", b =>
                {
                    b.Navigation("FKBlocoHorario");
                });

            modelBuilder.Entity("WebApplication1.Models.Cadeira", b =>
                {
                    b.Navigation("FKCurso_Cadeira");

                    b.Navigation("FKProfessor_Cadeira");

                    b.Navigation("FKTipologia_Cadeira");
                });

            modelBuilder.Entity("WebApplication1.Models.Curso", b =>
                {
                    b.Navigation("FKCurso_Cadeira");

                    b.Navigation("FKCurso_Instituicao");

                    b.Navigation("FKHorario");

                    b.Navigation("FKTurma");
                });

            modelBuilder.Entity("WebApplication1.Models.Grau", b =>
                {
                    b.Navigation("Curso");
                });

            modelBuilder.Entity("WebApplication1.Models.Horario", b =>
                {
                    b.Navigation("FKBlocoHorario");

                    b.Navigation("FKRegisto");
                });

            modelBuilder.Entity("WebApplication1.Models.Instituicao", b =>
                {
                    b.Navigation("FKCurso_Instituicao");
                });

            modelBuilder.Entity("WebApplication1.Models.Localidade", b =>
                {
                    b.Navigation("FKSala");
                });

            modelBuilder.Entity("WebApplication1.Models.Professor", b =>
                {
                    b.Navigation("FKProfessor_Cadeira");
                });

            modelBuilder.Entity("WebApplication1.Models.Sala", b =>
                {
                    b.Navigation("FKBloco");
                });

            modelBuilder.Entity("WebApplication1.Models.Tipologia", b =>
                {
                    b.Navigation("FKTipologia_Cadeira");
                });

            modelBuilder.Entity("WebApplication1.Models.Utilizador", b =>
                {
                    b.Navigation("FKRegisto");
                });
#pragma warning restore 612, 618
        }
    }
}
